@startuml Game
package object <<Rectangle>>{
    abstract class ObjectsFactory{
    makeObject():GameObject
}

interface FallingObjects implements GameObject{
    +contactwithClown():Boolean
    +contactwithStick():Boolean

  /'  -moveStrategy:MovementStrategy'/     /' change1 la2 we remove this cuz we send obj to move'/
    +setX():void
    +setY():void
    +contactwithClown():Boolean
    +contactwithStick():Boolean
}
class Plates implements FallingObjects{

}

class Bombs implements FallingObjects{

}
class Clown{
    -leftStick: GameObject
    -rightStick: GameObject

    -Clown(int, int, String)

    +getInstance(int, int,String): Clown
}

class Clown implements ControlObject{}
Clown *- Clown
interface ControlObject implements GameObject{}



ObjectsFactory --> GameObject:Factory Pattern


}
class MovementStrategy{
    -moveDirectionStrategy : MoveDirectionStrategy
    -movePatternStrategy : MovePatternStrategy
    -gameSpeed : ObjectSpeedStrategy
    +Movement(moveP : MovePatternStrategy, moveD : MoveDirectionStrategy,gameSpeed : SpeedStrategy)
    +Movement(moveP : MovePatternStrategy, moveD : MoveDirectionStrategy) 
    /'second constructor to make a movement without speed aka difault speed?'/

    +move(gameSpeed : SpeedStrategy) : void
}


interface MovePatternStrategy { 
    +patternMove() : void
}


interface MoveDirectionStrategy{
    +directionMove() : void
}



MovementStrategy o-- MoveDirectionStrategy
MovementStrategy o-- MovePatternStrategy




FallingObjects o-- MovementStrategy /'change1 prolly gone'/
package world <<Rectangle>>{
    /'Originator'/
    class Circus implements World{
        -MAX_TIME :int
        -endTime :long 
        -score:int
        -startTime:long
        -width :int
        -height :int
        -constant :List<GameObject>
        -moving :List<GameObject>
        -control :List<GameObject>
        -clownCollection:ClownGamePlateCollection
        +start():void
        +end():void
        +update():void
        +draw():void
        +addObject():void
        +removeObject():void
        +getStartTime():long
        +getEndTime():long
        +getWidth():int
        +getHeight():int
        +getConstant():List<GameObject>
        +getMoving():List<GameObject>
        +getControl():List<GameObject>
        -final timeElapsed : long

        +Circus(screenWidth : int , screenWeight : int)
        +Circus(screenWidth : int ,screenWeight : int,constant : List<GameObject>,moving : List<GameObject>,
        control : List<GameObject>,score : int,timeElapsed : long)
        
        +saveGame()
        +loadGame(snapshot : Snapshot)
    }
    
     /'Memento'/
    -class Snapshot{
        -final timeElapsed : long
        -final score : int
        -final constant : List<GameObject>
        -final moving : List<GameObject>
        -final control : List<GameObject>
        -final screenWeight : int
        -final screenWidth : int 

        Snapshot(circus : Circus)
    }
    
    

}
package main <<Rectangle>>{
    class Main{
        final gameController : GameController
        history : History
    }
    class Game {
     - currentGame:GameState
     -diffculty:DiffcultyStrategy
    + setState(GameState) : void
    + StartGame()
    + GameOver()
    + FinalSecondsofGame()
}

/'caretaker is history'/
class History{
    -circus : Circus
    -gamesSaved : Stack<Memento>

    +History(circus : Circus)
    +saveGame() : void
}


interface Start { 
    +StartGame()
    
}
interface Almost { 
    
    +FinalSecondsofGame()
    
}
interface Finish { 
    
    +GameOver()
}

class BeginGame implements Start{ 
    -Game currGame
    +StartGame()
   
}

class AlmostDoneGame implements Almost{
    -Game currGame
    +FinalSecondsofGame()
   
}

class FinshedGame implements Finish{
    -Game currGame
   
    +GameOver()
}

Game *-- Start
Game *-- Almost
Game *-- Finish
Main --> Game

Circus +- Snapshot
History o-- Circus  
Main *- History
Main *-- Circus


}
class StageDifficulty{
    -NumOfLivesStrategy : NumberOfLivesStrategy
    -SpeedStrategy : ObjectSpeedStrategy
    -NumOfClownsStrategy : NumberOfCLownsStrategy
    -ObjectsFallingStrategy : ObjectsFallingStrategy
    -MovementStrategy : Movement
/'gow to make it diff lines?'/
    StageDifficulty(numLives : NumberOfLivesStrategy,speed : ObjectSpeedStrategy,numClowns : NumberOfCLownsStrategy,objFalling : ObjectsFallingStrategy,movement : Movement)
                    /'movement sent with movementD and movementP'/
                    /'Speed made in construcotr'/
    +getNumberOfLives() : int
    +getFallingObjectSpeed() : int
    +getNumberOfCLowns() : int
    +getObjectsFalling() : ArrayList<FallingObjects>  
}
interface NumberOfLivesStrategy{
    +getNumberOfLives() : int
} 

interface ObjectSpeedStrategy {
    +getFallingObjectSpeed() : int
}

interface NumberOfClownsStrategy {
    +getNumberOfCLowns() : int
}

interface ObjectsFallingStrategy {
    +getObjectsFalling() : ArrayList<FallingObjects>  
}



StageDifficulty o-- MovementStrategy
StageDifficulty o-- NumberOfLivesStrategy
StageDifficulty o-- ObjectSpeedStrategy
StageDifficulty o-- NumberOfClownsStrategy
StageDifficulty o-- ObjectsFallingStrategy
Game *-- StageDifficulty

interface Iterator { 
    +hasNext(): boolean
    +next() : Plate
}

class CollectionIterator { 
    -Collection: collection
    -int: currentIndex

    +hasNext(): boolean
    +next() : Plate
}

interface Collection{
    
    +createIterator(): CollectionIterator 
    +getPlate(int index): Plate
    +size(): int 
    +removePlates(int startIndex, int endIndex): void 
}

class ClownGamePlateCollection{
    -ArrayList<Plates>: plates



    +createIterator(): CollectionIterator 
    +getPlate(int index): Plate
    +size(): int 
    +removePlates(int startIndex, int endIndex): void 
}



Iterator <|.. CollectionIterator
Collection <|.. ClownGamePlateCollection

CollectionIterator o-- ClownGamePlateCollection

Circus --> ClownGamePlateCollection



@enduml
